I"Ë<p>The part where I make a final project</p>

<h2 id="conception">Conception</h2>

<p>The idea here was really to make something simple to make sure that I had time to get all the underlying mechanics correct.
So I literally set up some Rails models called ‚Äúadjectives‚Äù, ‚Äúnouns‚Äù, and ‚Äúconcepts‚Äù. The former two had a ‚Äúname‚Äù string and the latter was just a join model for a has_many through relation with a method to display the combined string. I meant it to be a practice, but it still ended up taking all my time.</p>

<p>The finished project (available now at [https://legacy-chronicler.herokuapp.com/checklist]!) simply has a couple of tabs, one of which allows you to add Adjectives and Nouns, and the other of which allows you to combine them into Concepts.</p>

<h2 id="execution">Execution</h2>

<p>A fun thing I got to do here was figure out dynamic ‚Äòactive‚Äô items in a list. Within the component that handles Concept concepts, the lists of Adjectives and Nouns are shown just as in the Adjective and Noun component. However, here they are selectable for the purpose of creating new Concepts. This is done visually with bootstrap; all the lists of concepts are presented as <code class="highlighter-rouge">&lt;ListGroup.Item&gt;</code> components, and the <code class="highlighter-rouge">active</code> styling works well as an indicator.
But how to make exactly one <code class="highlighter-rouge">active</code> when clicked?
I ended up storing an <code class="highlighter-rouge">active_adjective</code> and <code class="highlighter-rouge">active_noun</code> integer in the container component‚Äôs <code class="highlighter-rouge">state</code> and passed down the appropriate one to each Adjective and Noun concept component in the tab. Each of those also got a <code class="highlighter-rouge">handleSelect</code> function passed as a prop from the same container which would pass its id back up to the container state and immediately change which one was active.
The only issue with that is the reusability of the component for concepts. Not all concepts needed to be looking for these extra props, so the component got a quick ternary variable:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  const options = props.handleSelect ?
    {
      action: true,
      active: props.selected === props.concept.id,
      onClick: () =&gt; props.handleSelect(props.concept.id)
    } :
    {}
	```
	
Which is rolled into the render like so:

</code></pre></div></div>
<p>return(
    &lt;ListGroup.Item {‚Ä¶options}&gt;
      {props.concept.name}
    &lt;/ListGroup.Item&gt;
  )
	```</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>While error handling is not particularly robust here, it is useful that functional components won't complain about props they don't have. It allows me to have a very small component that still can handle multiple use cases, here depending on whether or not I pass in a `handleSelect`. No selection handler? No need for the `action` flag that makes the concept clickable. This is especially nice because it prevents all the other concept lists from appearing like clicking on them should do something.
</code></pre></div></div>

<h2 id="problems">Problems</h2>

<p>My truly biggest pain was deploying to Heroku. An early attempt to get the project up and running there ended up completely screwing up my configuration even when serving the local development environment, and I had to start from scratch. Now that it is running there, here are some things I have learned from the process:</p>

<h3 id="package-managers">Package Managers</h3>
<ul>
  <li>Nobody likes npm anymore. Yarn is the way to go - so don‚Äôt <code class="highlighter-rouge">npm install</code> the React client‚Äôs dependencies because the Heroku build process will complain when it tries to <code class="highlighter-rouge">yarn install</code> and sees your <code class="highlighter-rouge">package-lock.json</code>.</li>
  <li>You should have two package.json files, one in your Rails root and another in your React root. If you add dependencies, you almost certainly want them in the React client list, so add them to that file. When you add dependencies, you should do that with <code class="highlighter-rouge">yarn add</code>, in which case you should not forget to go to the correct directory or use <code class="highlighter-rouge">yarn add --cwd YOUR_REACT_CLIENT_DIRECTORY</code></li>
  <li>The ideal setup for a Rails/Webpacker app does not involve any sort of separate node process in production, even though development is easiest if you‚Äôre running webpack-dev-server so that you can immediately see changes. Just have Heroku run Rails, and test that that works locally by running <code class="highlighter-rouge">./bin/rails server -e production</code></li>
  <li>Rails does not want to assume that it‚Äôll be serving your assets in production. In /config/environments/production.rb, you‚Äôll see that there is a setting to ‚ÄúDisable serving static files from the /public folder by default since Apache or NGINX already handles this‚Äù. On Heroku, we don‚Äôt have that kind of cool server setup. Set <code class="highlighter-rouge">config.public_file_server.enabled = true</code></li>
  <li>Finally, Github also assumes that you have a cool server setup, and so the autogenerated Rails .gitignore file ignores the /public assets folders. This gives Heroku mixed messages when your webpacker.yml production values have the default cache_manifest:true, since the manifest.json will be gitignored out. Even if you set this to false (which is not great for performance) Heroku seems to struggle precompiling your assets. So just be nice to Heroku! Precompile your assets with <code class="highlighter-rouge">RAILS_ENV=production bundle exec rake assets:precompile</code> and remove <code class="highlighter-rouge">public/assets</code> and <code class="highlighter-rouge">public/packs</code> from your .gitignore. At time of writing, Heroku automatically runs <code class="highlighter-rouge">rake assets:precompile</code> only if it fails to find a <code class="highlighter-rouge">manifest.json</code>. Now it should see your precompiled manifest, and simply use the assets that are now in your repository.</li>
</ul>

<h3 id="dumb-js-mistakes">Dumb JS mistakes</h3>
<ul>
  <li>A reference without an action is a valid line of code, and <code class="highlighter-rouge">event.preventDefault</code> without the parentheses is just a reference that will not stop the page from refreshing when you submit your form.</li>
</ul>
:ET